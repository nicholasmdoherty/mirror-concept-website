{"version":3,"sources":["common/components/Navbar.jsx","modules/main-header/MainHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","hiddenBackgroundBreakpoint","backgroundColor","state","hidden","window","scrollY","autoBind","addEventListener","setState","this","className","style","boxShadow","color","Button","size","variant","Component","MainHeader","Container","Row","Col","xs","sm","md","App","height","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAKqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAcRC,2BAA6B,GAfV,EAkBnBC,gBAAkB,OAfhB,EAAKC,MAAQ,CACXC,OAAQC,OAAOC,SAAW,EAAKL,4BAGjCM,IAAS,gBAPQ,E,iFAwBE,IAAD,OAKlBF,OAAOG,iBAAiB,UAAU,WAC5BH,OAAOC,QAAU,EAAKL,2BACxB,EAAKQ,SAAS,CAAEL,QAAQ,IAExB,EAAKK,SAAS,CAAEL,QAAQ,S,+BAKpB,IACFA,EAAWM,KAAKP,MAAhBC,OAEN,OACE,6BACE,yBACEO,UAAU,cACVC,MAAO,CACLV,gBAAiBE,EAAS,cAAgBM,KAAKR,gBAC/CW,UAAWT,EAAS,OAAS,yBAG/B,wBACEO,UAAU,6BACVC,MAAO,CAAEE,MAAO,YAFlB,kBAMA,kBAACC,EAAA,EAAD,CACEC,KAAK,KACLC,QAAQ,gBACRN,UAAU,0BAHZ,mB,GAzD0BO,c,gCCDfC,E,iLAEjB,OACE,kBAACC,EAAA,EAAD,CAAWT,UAAU,yBACnB,kBAACU,EAAA,EAAD,CAAKV,UAAU,uBACb,kBAACW,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGd,UAAU,uBACnC,wBAAIA,UAAU,gBAAd,+BAEF,kBAACW,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGd,UAAU,yBACnC,kBAACI,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAQ,gBAA1B,qB,GAT4BC,aCYzBQ,MAZf,WACE,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKC,MAAO,CAAEe,OAAQ,QAASzB,gBAAiB,gBCEpC0B,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0a9bc481.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport \"./common-components.css\";\n\nexport default class Navbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hidden: window.scrollY <= this.hiddenBackgroundBreakpoint\n    };\n\n    autoBind(this);\n  }\n\n  // ----------------------------------------------------------------------------------------------\n  // Variables\n  // ----------------------------------------------------------------------------------------------\n\n  // The breakpoint for hiding / showing the navbar backgruond\n  hiddenBackgroundBreakpoint = 50;\n\n  // The color code for the background of the navbar\n  backgroundColor = \"#333\";\n\n  // ----------------------------------------------------------------------------------------------\n  // Functions\n  // ----------------------------------------------------------------------------------------------\n\n  componentDidMount() {\n    /**\n     * Add event listener on component mount that updates the \"hidden\" flag in\n     * the state when a certain scroll level is hit.\n     */\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > this.hiddenBackgroundBreakpoint) {\n        this.setState({ hidden: false });\n      } else {\n        this.setState({ hidden: true });\n      }\n    });\n  }\n\n  render() {\n    let { hidden } = this.state;\n\n    return (\n      <div>\n        <div\n          className=\"main-navbar\"\n          style={{\n            backgroundColor: hidden ? \"transparent\" : this.backgroundColor,\n            boxShadow: hidden ? \"none\" : \"0px 3px 5px 1px #222\"\n          }}\n        >\n          <h4\n            className=\"m-0 pl-3 navbar-title-text\"\n            style={{ color: \"#f8f9fa\" }}\n          >\n            SOCIAL MIRRORS\n          </h4>\n          <Button\n            size=\"sm\"\n            variant=\"outline-light\"\n            className=\"m-2 mr-3 navbar-button\"\n          >\n            Pre-Order\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./main-header.css\";\nimport { Col, Button, Row, Container } from \"react-bootstrap\";\n\nexport default class MainHeader extends Component {\n  render() {\n    return (\n      <Container className=\"main-header mr-0 ml-0\">\n        <Row className=\"main-header-content\">\n          <Col xs={12} sm={6} md={8} className=\"content-text-column\">\n            <h2 className=\"content-text\">JOIN THE FUTURE OF FASHION</h2>\n          </Col>\n          <Col xs={12} sm={6} md={4} className=\"content-button-column\">\n            <Button size=\"lg\" variant=\"outline-dark\">\n              Learn More\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport Navbar from \"./common/components/Navbar\";\nimport MainHeader from \"./modules/main-header/MainHeader\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar />\n        <MainHeader />\n        <div style={{ height: \"300vh\", backgroundColor: \"#fafafa\" }} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}